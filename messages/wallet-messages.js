function wallet(user) {
    let message = `üíµ –í–∞—à –±–∞–ª–∞–Ω—Å:\n\n‚ñ´Ô∏è${user.balance_usd} USD`;

    const buttons = [
        [{
            text: "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data: "top_up&&choose_crypto"
        }]
    ]

    const extra = {
        reply_markup: {
            inline_keyboard: buttons
        }
    }

    return { message, extra };
}

function topUp(ctx, buttons) {
    const message = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!";
    const extra = {
        reply_markup: { inline_keyboard: buttons }
    };

    return { message, extra };
};

function chooseNetwork(networkList) {
    const message = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!";

    const buttons = []

    networkList.map(el => {
        buttons.push([{
            text: el.network, 
            callback_data: `top_up&&genAdrs:${el.id}`
        }])
    })

    buttons.push([{ text: "‚Äπ –ù–∞–∑–∞–¥", callback_data: "top_up&&choose_crypto" }]);

    const extra = {
        reply_markup: {
            inline_keyboard: buttons
        }
    };

    return { message, extra };
};

function generateAddress(cryptoToken, cryptoNetwork, userWallet) {
    const message = `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ –∏–ª–∏ QR-–∫–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.\n
–ú–æ–Ω–µ—Ç–∞: ${cryptoToken.name} 
–°–µ—Ç—å: ${cryptoNetwork} ‚ÄºÔ∏è

<code><i>${userWallet.wallet_address}</i></code>

${userWallet.payment_url}

–ú–∏–Ω. —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${JSON.parse(cryptoToken.limit).min_amount} ${cryptoToken.slug}

‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ ${cryptoToken.name} —á–µ—Ä–µ–∑ —Å–µ—Ç—å ${cryptoNetwork}, –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã. –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${JSON.parse(cryptoToken.limit).min_amount} ${cryptoToken.slug} –∏–ª–∏ –±–æ–ª—å—à–µ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞.`

    const buttons = [{ text: "‚Äπ –ù–∞–∑–∞–¥", callback_data: `top_up&&choose_crypto` }];

    const extra = {
        reply_markup: { 
            inline_keyboard: [ buttons ]
        },
        caption: message,
        parse_mode: 'HTML'
    };

    return extra;
};

export {
    wallet,
    topUp,
    chooseNetwork,
    generateAddress,
};